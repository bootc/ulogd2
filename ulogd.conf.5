.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH ULOGD.CONF 5 "May 25, 2013" "Linux Netfilter"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
ulogd.conf \- netfilter/iptables logging daemon configuration file
.SH SYNOPSIS
.B /etc/ulogd.conf
.SH DESCRIPTION
.I ulogd.conf
is the configuration file for
.BR ulogd (8).
The file broadly follows the
.B .ini
file format: it is divided into a number of sections containing
.BR key = value
pairs.
.SS "PLUGINS AND STACKS"
.B ulogd
consists of a small core and a number of plugins. All the real power lies in the
plugins and the configured interactions between them. There are three types of
plugins:
.PP
.B Input Plugins
act as data sources to
.BR ulogd .
They get data from somewhere outside of
.BR ulogd ,
and convert it into a list of
.B ulogd
keys.
.PP
.B Filter Plugins
interpret and/or filter data that was received from an Input Plugin or another
Filter Plugin. A good example is parsing a raw packet to extract IPv4 or TCP
header information.
.PP
.B Output Plugins
describe how and where to put the information after it has been processed by an
Input Plugin and optionally one or more Filter Plugins. The simplest example is
to build a line per packet and fprint it to a file. Some people might want to
log into a SQL database or want an output conforming to the IETF IPFIX language.
.PP
A
.B Plugin Stack
is a series of plugins, starting with an Input Plugin, optionally
one or more Filter Plugins, followed by one Output Plugin at the end. Any number
of stacks may be configured to process one or more sources of input in a wide
variety of ways.
.SS "[GLOBAL] SECTION"
The
.B [global]
section is used for general configuration such as log level, loading plugins and
setting up stacks.
.TP
\fBlogfile\fR=\fIFILE\fR
Set the destination file for messages generated by
.B ulogd
itself. This file is not used for messages originating from iptables. This can
be set to the string
.I syslog
to send the messages to the system logger instead of to a file, or
.I stdout
to send messages to standard output.
.TP
\fBloglevel\fR=\fILEVEL\fR
Set the log level used for messages emitted by
.BR ulogd .
Messages with a priority lower than that listed in this configuration directive
are
.B not
sent to the log file.
.B ulogd
uses the following log levels:
.RB "debug(" 1 "), info(" 3 "), notice(" 5 "), error(" 7 ") or fatal(" 8 ")."
The default log level is
.BR 5 .
Note that if the
.BR \-l " or " \-\-loglevel
options are passed as arguments to
.BR ulogd ,
the value from the command-line will override any value given in this
configuration file.
.TP
\fBplugin\fR=\fIFILE\fR
Load a plugin into
.BR ulogd .
Plugins provide means to take input from a source of data, process the
information, then output said information in a particular format. Note that
loading plugins only permits the functionality to be used in a stack, but does
not automatically enable it (e.g. loading the MySQL plugin doesn't connect to a
database without further configuration).
.TP
\fBstack\fR=\fISTACK\fR
Define a Plugin Stack. The definition is a comma-separated list of
.IR NAME : PLUGIN
pairs. The first tuple in the list must point to an Input Plugin, the final
tuple must point to an Output Plugin, and any tuples in between must point to
Filter Plugins. The names in the tuples are used to reference particular
instances of a plugin, and are also used for configuring each instance in
individual sections of the configuration file.
.SS "NFLOG INPUT PLUGIN"
The \fBNFLOG\fR plugin is an Input Plugin that collects packets from the kernel
NFLOG iptables target using a netlink socket. This target can be used in place
of the LOG target to bypass the kernel log ring buffer, which is much less
efficient than using netlink and can drown out other useful kernel log messages.
The NFLOG target is a more modern replacement for the ULOG target. The plugin
can be configured with the following directives:
.TP
\fBbufsize\fR=\fIINTEGER\fR (default: 150000)
.TP
\fBgroup\fR=\fIINTEGER\fR (default: 0)
.TP
\fBunbind\fR=\fIINTEGER\fR (default: 1)
.TP
\fBbind\fR=\fIINTEGER\fR (default: 0)
.TP
\fBseq_local\fR=\fIINTEGER\fR (default: 0)
.TP
\fBseq_global\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnumeric_label\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_socket_buffer_size\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_socket_buffer_maxsize\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_qthreshold\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_qtimeout\fR=\fIINTEGER\fR (default: 0)
.SS "ULOG INPUT PLUGIN"
The \fBULOG\fR plugin is an Input Plugin that collects packets from the kernel
ULOG iptables target using a netlink socket. This target can be used in place of
the LOG target to bypass the kernel log ring buffer, which is much less
efficient than using netlink and can drown out other useful kernel log messages.
The ULOG target is still available, but has been replaced by the NFLOG target
in kernels >= 2.6.14. The plugin can be configured with the following
directives:
.TP
\fBbufsize\fR=\fIINTEGER\fR (default: 150000)
.TP
\fBnlgroup\fR=\fIINTEGER\fR (default: 32)
.TP
\fBrmem\fR=\fIINTEGER\fR (default: 131071)
.TP
\fBnumeric_label\fR=\fIINTEGER\fR (default: 0)
.SS "UNIXSOCK INPUT PLUGIN"
The \fBUNIXSOCK\fR plugin is an Input Plugin that collects packets from a UNIX
socket. This can be used to inject packets into ulogd from userspace; a sample
PERL script that uses this functionality (pcap2ulog) is included in
/usr/share/doc/ulogd2/examples/pcap2ulog.gz.
.TP
\fBsocket_path\fR=\fISTRING\fR (default: "/var/run/ulogd/ulogd2.sock")
.TP
\fBbufsize\fR=\fIINTEGER\fR (default: 0)
.TP
\fBperms\fR=\fIINTEGER\fR (default: 384; octal 0600)
.TP
\fBowner\fR=\fISTRING\fR (default: unset)
.TP
\fBgroup\fR=\fISTRING\fR (default: unset)
.SS "NFACCT INPUT PLUGIN"
The \fBNFACCT\fR plugin is an Input Plugin that collects accounting data using
nfacct. Accounting objects are added using the
.BR nfacct (8)
utility and accounting is accumulated using the iptables \fBnfacct\fR module's
\-\-nfacct\-name option. This is available in Linux kernels >= 3.3.
.TP
\fBpollinterval\fR=\fIINTEGER\fR (default: 0)
.TP
\fBzerocounter\fR=\fIINTEGER\fR (default: 1)
.TP
\fBtimestamp\fR=\fIINTEGER\fR (default: 0)
.SS "NFCT INPUT PLUGIN"
The \fBNFCT\fR plugin is an Input Plugin that collects per-flow accounting data
by listening to netfilter conntrack events. Note that you must use
.BR sysctl (8)
to set \fBnet.netfilter.nf_conntrack_acct\fR = 1 to include packet and byte
counts in the accounting data.
.TP
\fBpollinterval\fR=\fIINTEGER\fR (default: 0)
.TP
\fBhash_enable\fR=\fIINTEGER\fR (default: 1)
.TP
\fBhash_buckets\fR=\fIINTEGER\fR (default: 8192)
.TP
\fBhash_max_entries\fR=\fIINTEGER\fR (default: 32768)
.TP
\fBevent_mask\fR=\fIINTEGER\fR (default: 5; NEW(1) | DESTROY(4))
.TP
\fBnetlink_socket_buffer_size\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_socket_buffer_maxsize\fR=\fIINTEGER\fR (default: 0)
.TP
\fBnetlink_resync_timeout\fR=\fIINTEGER\fR (default: 60)
.TP
\fBreliable\fR=\fIINTEGER\fR (default: 0)
.TP
\fBaccept_src_filter\fR=\fISTRING\fR (default: unset)
Comma-separated list of IPv4 or IPv6 addresses or networks.
.TP
\fBaccept_dst_filter\fR=\fISTRING\fR (default: unset)
Comma-separated list of IPv4 or IPv6 addresses or networks.
.TP
\fBaccept_proto_filter\fR=\fISTRING\fR (default: unset)
Comma-separated list of protocol names as listed in
.BR protocols (5),
.RI "e.g. " tcp ", " udp .
.SS "BASE FILTER PLUGIN"
The \fBBASE\fR plugin is a Filter Plugin that parses raw packet data and returns
a number of fields describing the headers in the packet. This plugin is required
if you want to inspect or log fields such as port numbers and IP addresses
contained within packets.
.P
This plugin has no configuration.
.SS "HWHDR FILTER PLUGIN"
The \fBHWHDR\fR plugin is a Filter Plugin that converts binary Ethernet MAC
addresses to textual format.
.P
This plugin has no configuration.
.SS "IFINDEX FILTER PLUGIN"
.SS "IP2BIN FILTER PLUGIN"
.SS "IP2HBIN FILTER PLUGIN"
.SS "IP2STR FILTER PLUGIN"
.SS "MARK FILTER PLUGIN"
.SS "PRINTFLOW FILTER PLUGIN"
.SS "PRINTPKT FILTER PLUGIN"
.SS "PWSNIFF FILTER PLUGIN"
.SS "GPRINT OUTPUT PLUGIN"
.SS "GRAPHITE OUTPUT PLUGIN"
.SS "LOGEMU OUTPUT PLUGIN"
.SS "NACCT OUTPUT PLUGIN"
.SS "OPRINT OUTPUT PLUGIN"
.SS "SYSLOG OUTPUT PLUGIN"
.SS "XML OUTPUT PLUGIN"
.SH EXAMPLES
.SH FILES
.I /etc/ulogd.conf
.br
.I /usr/sbin/ulogd
.SH SEE ALSO
.BR ulogd (8)
.PP
There is more documentation about the daemon and the database plugins
(including examples) in the directories
.nf 
.br 
.I /usr/share/doc/ulogd2
.fi
.SH AUTHOR
This manual page was written by Chris Boot <bootc@bootc.net>, for the Debian
GNU/Linux system (but may be used by others).
